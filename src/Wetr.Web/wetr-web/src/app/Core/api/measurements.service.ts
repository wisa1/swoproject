/**
 * Wetr.WebService
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { GroupedResultRecord } from '../model/groupedResultRecord';
import { Measurement } from '../model/measurement';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MeasurementsService {

    protected basePath = 'http://localhost:62005';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param measurement 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public measurementsInsertMeasurement(measurement: Measurement, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public measurementsInsertMeasurement(measurement: Measurement, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public measurementsInsertMeasurement(measurement: Measurement, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public measurementsInsertMeasurement(measurement: Measurement, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (measurement === null || measurement === undefined) {
            throw new Error('Required parameter measurement was null or undefined when calling measurementsInsertMeasurement.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/measurements`,
            measurement,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param measurements 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public measurementsInsertMultipleMeasurements(measurements: Array<Measurement>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public measurementsInsertMultipleMeasurements(measurements: Array<Measurement>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public measurementsInsertMultipleMeasurements(measurements: Array<Measurement>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public measurementsInsertMultipleMeasurements(measurements: Array<Measurement>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (measurements === null || measurements === undefined) {
            throw new Error('Required parameter measurements was null or undefined when calling measurementsInsertMultipleMeasurements.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/measurements/multiple`,
            measurements,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param aggregate 
     * @param period 
     * @param deviceId 
     * @param latitude 
     * @param longitude 
     * @param measurementTypeId 
     * @param dateFrom 
     * @param dateTo 
     * @param radiusKm 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public measurementsQueryMeasurements(aggregate: 0 | 1 | 2 | 3 | 4, period: 0 | 1 | 2 | 3 | 4, deviceId: number, latitude?: number, longitude?: number, measurementTypeId?: number, dateFrom?: Date, dateTo?: Date, radiusKm?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<GroupedResultRecord>>;
    public measurementsQueryMeasurements(aggregate: 0 | 1 | 2 | 3 | 4, period: 0 | 1 | 2 | 3 | 4, deviceId: number, latitude?: number, longitude?: number, measurementTypeId?: number, dateFrom?: Date, dateTo?: Date, radiusKm?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GroupedResultRecord>>>;
    public measurementsQueryMeasurements(aggregate: 0 | 1 | 2 | 3 | 4, period: 0 | 1 | 2 | 3 | 4, deviceId: number, latitude?: number, longitude?: number, measurementTypeId?: number, dateFrom?: Date, dateTo?: Date, radiusKm?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GroupedResultRecord>>>;
    public measurementsQueryMeasurements(aggregate: 0 | 1 | 2 | 3 | 4, period: 0 | 1 | 2 | 3 | 4, deviceId: number, latitude?: number, longitude?: number, measurementTypeId?: number, dateFrom?: Date, dateTo?: Date, radiusKm?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aggregate === null || aggregate === undefined) {
            throw new Error('Required parameter aggregate was null or undefined when calling measurementsQueryMeasurements.');
        }

        if (period === null || period === undefined) {
            throw new Error('Required parameter period was null or undefined when calling measurementsQueryMeasurements.');
        }

        if (deviceId === null || deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling measurementsQueryMeasurements.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (aggregate !== undefined && aggregate !== null) {
            queryParameters = queryParameters.set('aggregate', <any>aggregate);
        }
        if (period !== undefined && period !== null) {
            queryParameters = queryParameters.set('period', <any>period);
        }
        if (deviceId !== undefined && deviceId !== null) {
            queryParameters = queryParameters.set('deviceId', <any>deviceId);
        }
        if (latitude !== undefined && latitude !== null) {
            queryParameters = queryParameters.set('latitude', <any>latitude);
        }
        if (longitude !== undefined && longitude !== null) {
            queryParameters = queryParameters.set('longitude', <any>longitude);
        }
        if (measurementTypeId !== undefined && measurementTypeId !== null) {
            queryParameters = queryParameters.set('measurementTypeId', <any>measurementTypeId);
        }
        if (dateFrom !== undefined && dateFrom !== null) {
            queryParameters = queryParameters.set('dateFrom', <any>dateFrom.toISOString());
        }
        if (dateTo !== undefined && dateTo !== null) {
            queryParameters = queryParameters.set('dateTo', <any>dateTo.toISOString());
        }
        if (radiusKm !== undefined && radiusKm !== null) {
            queryParameters = queryParameters.set('radiusKm', <any>radiusKm);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GroupedResultRecord>>(`${this.basePath}/measurements/query`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
