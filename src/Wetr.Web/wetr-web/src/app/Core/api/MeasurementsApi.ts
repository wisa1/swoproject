/**
 * Wetr.WebService
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class MeasurementsApi {
    protected basePath = 'http://localhost:62005';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     *
     * @param measurement
     */
    public measurementsInsertMeasurement (measurement: models.Measurement, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
        const localVarPath = this.basePath + '/measurements';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'measurement' is not null or undefined
        if (measurement === null || measurement === undefined) {
            throw new Error('Required parameter measurement was null or undefined when calling measurementsInsertMeasurement.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: measurement,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     *
     * @param measurements
     */
    public measurementsInsertMultipleMeasurements (measurements: Array<models.Measurement>, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
        const localVarPath = this.basePath + '/measurements/multiple';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'measurements' is not null or undefined
        if (measurements === null || measurements === undefined) {
            throw new Error('Required parameter measurements was null or undefined when calling measurementsInsertMultipleMeasurements.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: measurements,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     *
     * @param filterAggregationType
     * @param filterPeriodType
     * @param filterMeasurementDeviceID
     * @param filterMeasurementDeviceCommunityID
     * @param filterMeasurementDeviceDeviceName
     * @param filterMeasurementDeviceAddress
     * @param filterMeasurementDeviceLongitude
     * @param filterMeasurementDeviceLatitude
     * @param filterMeasurementTypeID
     * @param filterMeasurementTypeDescription
     * @param filterDateFrom
     * @param filterDateTo
     * @param filterRadiusKm
     */
    public measurementsQueryMeasurements (filterAggregationType?: 0 | 1 | 2 | 3 | 4, filterPeriodType?: 0 | 1 | 2 | 3 | 4, filterMeasurementDeviceID?: number, filterMeasurementDeviceCommunityID?: number, filterMeasurementDeviceDeviceName?: string, filterMeasurementDeviceAddress?: string, filterMeasurementDeviceLongitude?: number, filterMeasurementDeviceLatitude?: number, filterMeasurementTypeID?: number, filterMeasurementTypeDescription?: string, filterDateFrom?: Date, filterDateTo?: Date, filterRadiusKm?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.GroupedResultRecord>> {
        const localVarPath = this.basePath + '/measurements/query';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (filterAggregationType !== undefined) {
            queryParameters['filter.aggregationType'] = filterAggregationType;
        }

        if (filterPeriodType !== undefined) {
            queryParameters['filter.periodType'] = filterPeriodType;
        }

        if (filterMeasurementDeviceID !== undefined) {
            queryParameters['filter.measurementDevice.iD'] = filterMeasurementDeviceID;
        }

        if (filterMeasurementDeviceCommunityID !== undefined) {
            queryParameters['filter.measurementDevice.communityID'] = filterMeasurementDeviceCommunityID;
        }

        if (filterMeasurementDeviceDeviceName !== undefined) {
            queryParameters['filter.measurementDevice.deviceName'] = filterMeasurementDeviceDeviceName;
        }

        if (filterMeasurementDeviceAddress !== undefined) {
            queryParameters['filter.measurementDevice.address'] = filterMeasurementDeviceAddress;
        }

        if (filterMeasurementDeviceLongitude !== undefined) {
            queryParameters['filter.measurementDevice.longitude'] = filterMeasurementDeviceLongitude;
        }

        if (filterMeasurementDeviceLatitude !== undefined) {
            queryParameters['filter.measurementDevice.latitude'] = filterMeasurementDeviceLatitude;
        }

        if (filterMeasurementTypeID !== undefined) {
            queryParameters['filter.measurementType.iD'] = filterMeasurementTypeID;
        }

        if (filterMeasurementTypeDescription !== undefined) {
            queryParameters['filter.measurementType.description'] = filterMeasurementTypeDescription;
        }

        if (filterDateFrom !== undefined) {
            queryParameters['filter.dateFrom'] = filterDateFrom;
        }

        if (filterDateTo !== undefined) {
            queryParameters['filter.dateTo'] = filterDateTo;
        }

        if (filterRadiusKm !== undefined) {
            queryParameters['filter.radiusKm'] = filterRadiusKm;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
