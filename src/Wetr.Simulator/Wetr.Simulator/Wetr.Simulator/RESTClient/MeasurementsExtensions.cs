// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Wetr.Simulator.REST
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Measurements.
    /// </summary>
    public static partial class MeasurementsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='measurement'>
            /// </param>
            public static object InsertMeasurement(this IMeasurements operations, Measurement measurement)
            {
                return Task.Factory.StartNew(s => ((IMeasurements)s).InsertMeasurementAsync(measurement), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='measurement'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InsertMeasurementAsync(this IMeasurements operations, Measurement measurement, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InsertMeasurementWithHttpMessagesAsync(measurement, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='measurements'>
            /// </param>
            public static object InsertMultipleMeasurements(this IMeasurements operations, IList<Measurement> measurements)
            {
                return Task.Factory.StartNew(s => ((IMeasurements)s).InsertMultipleMeasurementsAsync(measurements), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='measurements'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InsertMultipleMeasurementsAsync(this IMeasurements operations, IList<Measurement> measurements, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InsertMultipleMeasurementsWithHttpMessagesAsync(measurements, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregate'>
            /// </param>
            /// <param name='period'>
            /// </param>
            /// <param name='deviceId'>
            /// </param>
            /// <param name='latitude'>
            /// </param>
            /// <param name='longitude'>
            /// </param>
            /// <param name='measurementTypeId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='radiusKm'>
            /// </param>
            public static IList<GroupedResultRecord> QueryMeasurements(this IMeasurements operations, int aggregate, int period, int deviceId, double? latitude = default(double?), double? longitude = default(double?), int? measurementTypeId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? radiusKm = default(int?))
            {
                return Task.Factory.StartNew(s => ((IMeasurements)s).QueryMeasurementsAsync(aggregate, period, deviceId, latitude, longitude, measurementTypeId, dateFrom, dateTo, radiusKm), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aggregate'>
            /// </param>
            /// <param name='period'>
            /// </param>
            /// <param name='deviceId'>
            /// </param>
            /// <param name='latitude'>
            /// </param>
            /// <param name='longitude'>
            /// </param>
            /// <param name='measurementTypeId'>
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='radiusKm'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupedResultRecord>> QueryMeasurementsAsync(this IMeasurements operations, int aggregate, int period, int deviceId, double? latitude = default(double?), double? longitude = default(double?), int? measurementTypeId = default(int?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), int? radiusKm = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryMeasurementsWithHttpMessagesAsync(aggregate, period, deviceId, latitude, longitude, measurementTypeId, dateFrom, dateTo, radiusKm, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
