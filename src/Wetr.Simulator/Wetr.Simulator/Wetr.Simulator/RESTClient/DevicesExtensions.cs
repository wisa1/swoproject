// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Wetr.Simulator.REST
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Devices.
    /// </summary>
    public static partial class DevicesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MeasurementDevice> GetAllDevices(this IDevices operations)
            {
                return Task.Factory.StartNew(s => ((IDevices)s).GetAllDevicesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MeasurementDevice>> GetAllDevicesAsync(this IDevices operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDevicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static object UpdateDevice(this IDevices operations, MeasurementDevice value)
            {
                return Task.Factory.StartNew(s => ((IDevices)s).UpdateDeviceAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDeviceAsync(this IDevices operations, MeasurementDevice value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDeviceWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static object InsertDevice(this IDevices operations, MeasurementDevice value)
            {
                return Task.Factory.StartNew(s => ((IDevices)s).InsertDeviceAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InsertDeviceAsync(this IDevices operations, MeasurementDevice value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InsertDeviceWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static object DeleteDevice(this IDevices operations, MeasurementDevice value)
            {
                return Task.Factory.StartNew(s => ((IDevices)s).DeleteDeviceAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDeviceAsync(this IDevices operations, MeasurementDevice value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDeviceWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MeasurementDevice GetDeviceById(this IDevices operations, int id)
            {
                return Task.Factory.StartNew(s => ((IDevices)s).GetDeviceByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MeasurementDevice> GetDeviceByIdAsync(this IDevices operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeviceByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
